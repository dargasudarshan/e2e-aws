#!/bin/bash
set -ex

litmus_job_label_key=$(echo $1 | cut -d "=" -f 2 | cut -d ":" -f 1)
litmus_job_label_value=$(echo $1 | cut -d "=" -f 2 | cut -d ":" -f 2)
litmus_result_cr_name=$(echo $2 | cut -d "=" -f 2)

jobNameCmd="kubectl get jobs -n litmus --no-headers -o jsonpath='{.items[?(@.metadata.labels.${litmus_job_label_key}==\"${litmus_job_label_value}\")].metadata.name}'"

job_name=$(eval ${jobNameCmd}); retcode=$?
${utils_path}/error_handler ${retcode} msg="Unable to find litmusbook, exiting" action="exit"

litmusPodCmd="kubectl get pod --no-headers -n litmus -o jsonpath='{.items[?(@.metadata.labels.job-name==\"${job_name}\")].metadata.name}'"
litmus_pod=$(eval ${litmusPodCmd}); retcode=$?
${utils_path}/error_handler ${retcode} msg="Unable to find litmus test runner pod, exiting" action="exit"

containerStateCmd="kubectl get pod ${litmus_pod} -n litmus -o jsonpath='{.status.containerStatuses[?(@.name==\"ansibletest\")].state}'"
testStateCmd="kubectl get litmusresult ${litmus_result_cr_name} -n litmus --no-headers -o custom-columns=:spec.testStatus.phase"

# wait until the test job starts
while true; do
  cstate=$(eval ${containerStateCmd}); rc=$?
  if [[ $rc -eq 0 && ! -z $cstate ]]; then
    if [[ ! $cstate =~ 'running' ]]; then
      sleep 1
    else break;
    fi
  else
    echo "unable to get litmus container status"; exit 1
  fi
done

# wait for litmus CR to be created 
sleep 120

# wait for the test status to be marked completed
while true; do
  tstate=$(eval ${testStateCmd}); rc=$?
  if [[ $rc -eq 0 && ! -z $tstate ]]; then
    if [[ ! $tstate =~ 'completed' ]]; then
      sleep 1
    else break;
    fi
  else
    echo "unable to get litmus result custom resource"; exit 1
  fi
done

